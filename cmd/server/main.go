package main

import (
	"context"
	"fmt"
	"log"
	"net/http"

	"github.com/bufbuild/connect-go"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	fsv1 "github.com/davidharting/learngo/gen/protos/fs/v1"
	"github.com/davidharting/learngo/gen/protos/fs/v1/fsv1connect"
	"github.com/davidharting/learngo/gen/protos/greet/v1/greetv1connect" // generated by protoc-gen-go

	greetv1 "github.com/davidharting/learngo/gen/protos/greet/v1" // generated by protoc-gen-go
)

// I am mounting two different connect-go services in one process. Probably unusual, but just wanting to poke around.

func main() {
	greeter := &GreetServer{}
	mux := http.NewServeMux()
	path, handler := greetv1connect.NewGreetServiceHandler(greeter)
	mux.Handle(path, handler)

	fsService := &FsServer{}
	fsPath, fsHandler := fsv1connect.NewFsServiceHandler(fsService)
	mux.Handle(fsPath, fsHandler)

	http.ListenAndServe(
		"localhost:8080",
		// Use h2c so we can serve HTTP/2 without TLS.
		h2c.NewHandler(mux, &http2.Server{}),
	)
}

// Set up the Greeting service

type GreetServer struct{}

func (s *GreetServer) Greet(
	ctx context.Context,
	req *connect.Request[greetv1.GreetRequest],
) (*connect.Response[greetv1.GreetResponse], error) {

	log.Println("Request headers: ", req.Header())
	res := connect.NewResponse(&greetv1.GreetResponse{
		Greeting: fmt.Sprintf("Hello, %s!", req.Msg.Name),
	})
	res.Header().Set("Greet-Version", "v1")
	return res, nil
}

// Set up the FS service

type FsServer struct{}

func (s *FsServer) ListFiles(ctx context.Context, req *connect.Request[fsv1.ListFilesRequest]) (*connect.Response[fsv1.ListFilesResponse], error) {
	return nil, nil
}
