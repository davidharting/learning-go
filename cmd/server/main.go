package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"time"

	"github.com/bufbuild/connect-go"
	"github.com/rs/cors"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	"github.com/davidharting/learngo/disk"
	fsv1 "github.com/davidharting/learngo/gen/protos/fs/v1"
	"github.com/davidharting/learngo/gen/protos/fs/v1/fsv1connect"
	"github.com/davidharting/learngo/gen/protos/greet/v1/greetv1connect" // generated by protoc-gen-go

	greetv1 "github.com/davidharting/learngo/gen/protos/greet/v1" // generated by protoc-gen-go
)

// I am mounting two different connect-go services in one process. Probably unusual, but just wanting to poke around.

func main() {
	greeter := &GreetServer{}
	mux := http.NewServeMux()
	path, handler := greetv1connect.NewGreetServiceHandler(greeter)
	mux.Handle(path, handler)

	fsService := &FsServer{}
	fsPath, fsHandler := fsv1connect.NewFsServiceHandler(fsService)
	mux.Handle(fsPath, fsHandler)

	http.ListenAndServe(
		"localhost:8080",
		// Use h2c so we can serve HTTP/2 without TLS.
		h2c.NewHandler(newCORS().Handler(mux), &http2.Server{}),
	)
}

// Set up the Greeting service

type GreetServer struct{}

func (s *GreetServer) Greet(
	ctx context.Context,
	req *connect.Request[greetv1.GreetRequest],
) (*connect.Response[greetv1.GreetResponse], error) {

	log.Println("Request headers: ", req.Header())
	res := connect.NewResponse(&greetv1.GreetResponse{
		Greeting: fmt.Sprintf("Hello, %s!", req.Msg.Name),
	})
	res.Header().Set("Greet-Version", "v1")
	return res, nil
}

// Set up the FS service

type FsServer struct{}

func (s *FsServer) ListFiles(ctx context.Context, req *connect.Request[fsv1.ListFilesRequest]) (*connect.Response[fsv1.ListFilesResponse], error) {

	// TODO: Environment variable (and singleton?) for local disk
	log.Println("Request headers: ", req.Header())
	d := disk.NewLocal("/Users/david/repos/dbt-labs/jaffle_shop_metrics")
	files := d.ListAll()
	log.Printf("Looking at %v, found these files:\n%v", "~/repos/dbt-labs/jaffle_shop_metrics", files)

	filesForResponse := make([]*fsv1.FileInfo, 0)
	for _, file := range files {
		filesForResponse = append(filesForResponse, internalToExternalFileInfo(&file))
	}

	res := connect.NewResponse(&fsv1.ListFilesResponse{
		Files: filesForResponse,
	})
	res.Header().Set("Fs-Version", "v1")
	return res, nil
}

func internalToExternalFileInfo(in *disk.FileInfo) (out *fsv1.FileInfo) {
	return &fsv1.FileInfo{
		RelativePath: in.RelativePath,
		SizeInBytes:  in.SizeInBytes,
	}
}

func newCORS() *cors.Cors {
	// To let web developers play with the demo service from browsers, we need a
	// very permissive CORS setup.
	return cors.New(cors.Options{
		AllowedMethods: []string{
			http.MethodHead,
			http.MethodGet,
			http.MethodPost,
			http.MethodPut,
			http.MethodPatch,
			http.MethodDelete,
		},
		AllowOriginFunc: func(origin string) bool {
			// Allow all origins, which effectively disables CORS.
			return true
		},
		AllowedHeaders: []string{"*"},
		ExposedHeaders: []string{
			// Content-Type is in the default safelist.
			"Accept",
			"Accept-Encoding",
			"Accept-Post",
			"Connect-Accept-Encoding",
			"Connect-Content-Encoding",
			"Content-Encoding",
			"Grpc-Accept-Encoding",
			"Grpc-Encoding",
			"Grpc-Message",
			"Grpc-Status",
			"Grpc-Status-Details-Bin",
		},
		// Let browsers cache CORS information for longer, which reduces the number
		// of preflight requests. Any changes to ExposedHeaders won't take effect
		// until the cached data expires. FF caps this value at 24h, and modern
		// Chrome caps it at 2h.
		MaxAge: int(2 * time.Hour / time.Second),
	})
}
